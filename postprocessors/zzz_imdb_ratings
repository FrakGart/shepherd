#!/usr/bin/env perl

# Augment XMLTV start/stop times with the local timezone if MythTV's
# TimeOffset setting is anything other than "None"
#  * to be used as a postprocessor for XMLTV data
#  * can be used in conjunction with 'shepherd' XMLTV reconciler or standalone
#    (pipe-through)
#  * no configuration necessary
#
#  input XMLTV files will either have programme start/stop with or without
#  timezones.  If no timezone is present, Shepherd assumes the input
#  start/stop times are in 'localtime'.
#
#  If MythTV's "TimeOffset" setting is set to anything other than 'None',
#  this can cause programming information to be out:
#   - if set to 'All', all programs will be out by the difference between
#     GMT and locatime ('All' means MythTV is expecting all start/stop times
#     in GMT)
#   - if explicitly set to GMT +/- XX then this will cause programming to
#     be out whenever there is a switchover to/from daylight savings
#
#  this postprocessor addresses this by explicitly putting a timezone
#  on every programme that doesn't already have one, BUT ONLY IF
#  MythTV is configured to anything other than 'None'.
#
#  provided your unix system is configured into the correct timezone,
#  this will work just fine including boundaries crossing daylight savings.
#
#  it means that it doesn't matter if MythTV's "TimeOffset" is set to
#  'All' or 'None', or something inbetween, the data will be right regardless.

# Specific enhancement for Broken Hill:
#  it seems ABC1 broadcasts to Broken Hill with incorrect times. They're using
#  a satellite feed from NSW so Broken Hill is always out by 30 minutes _just_
#  for ABC1 (not ABC2 or any other stations).
#  Since this seems to happen across all ABC1 data from all grabbers (i.e. all
#  data sources get this wrong), fix it up in this postprocessor

# April 2013:
#  MythTV now REQUIRES timezone-stamped data:
#    http://code.mythtv.org/cgit/mythtv/commit/?id=ff5ab27842c522f9e054876a8eb69a51b8c86a2e
#  So we can no longer supply unstamped data as "local time." That will be
#  considered UTC instead. The fix: for MythTV 0.27+, augment_timezone will add timezones
#  to all data, regardless of MythTV's "TimeOffset".
#

use strict;
use warnings;
my $progname = "zzz_imdb_ratings";
my $version = "0.01";

use XMLTV;
use POSIX qw(strftime mktime);
use Getopt::Long;
use IO::File;
use Data::Dumper;
use LWP::Simple;
use IO::Uncompress::Gunzip qw(gunzip $GunzipError) ;
use Text::CSV;
use Shepherd::Common;


$| = 1;
my %stats;
my $channels, my $opt_channels;

my $opt = { };
$opt->{output_file} =	"output.xmltv";
$opt->{debug} =			0;

my $ratings_tsv_file = "title.ratings.tsv";
my $ratings_tsv_url = "https://datasets.imdbws.com/title.ratings.tsv.gz";
my %ratings_data;

# parse command line
GetOptions(
	'output=s'		=> \$opt->{output_file},
	'mysql_file=s'		=> \$opt->{mysql_file},

	'region=i'		=> \$opt->{region},
	'days=i'		=> \$opt->{days},		# ignored
	'offset=i'		=> \$opt->{offset},		# ignored
	'timezone=s'		=> \$opt->{timezone},		# ignored
	'channels_file=s'	=> \$opt->{channels_file},
	'config-file=s'		=> \$opt->{configfile},		# ignored

	'test=s'		=> \$opt->{test},

	'help'			=> \$opt->{help},
	'verbose'		=> \$opt->{help},
	'version'		=> \$opt->{version},
	'ready'			=> \$opt->{ready},
	'desc'			=> \$opt->{desc},
	'v'			=> \$opt->{version});

printf "%s v%s\n",$progname,$version;

if ($opt->{version} || $opt->{desc} || $opt->{help} || $opt->{ready} ||
    $opt->{output_file} eq "") {
	printf "Add IMDB ratings\n" if $opt->{desc};

	printf "$progname is ready for operation.\n" if ($opt->{ready});

	printf "No --output file specified.\n" if ($opt->{output_file} eq "");

	if ($opt->{help} || $opt->{output_file} eq "") {
		print<<EOF

usage: $0 [options] {FILE(s)}

Supported options include:
  --output={file}      Send final XMLTV output to {file} (default: $opt->{output_file})
EOF
;
	}
	exit(0);
}


my $check = &check_ratings_file;
unless (!$check) { $check = &read_ratings_file; }

if (!$check) {
	print("No or unreadable ratings file, not modifying inputs.\n");
}

&run_test if (defined $opt->{test});


my %writer_args = ( encoding => 'ISO-8859-1' );
my $fh = new IO::File(">".$opt->{output_file}) || die "can't open $opt->{output_file} for writing: $!";
$writer_args{OUTPUT} = $fh;

my $writer = new XMLTV::Writer(%writer_args);
$writer->start( {
	'source-info-name' => "$progname $version",
	'generator-info-name' => "$progname $version"} );

foreach my $file (@ARGV) {
	printf " - parsing: %s\n", ($file eq "-" ? "(from-stdin, hit control-D to finish)" : $file);
	if ($check) {
		XMLTV::parsefiles_callback(undef, undef, \&channel_cb,\&programme_cb, $file);
	} else {
		XMLTV::parsefiles_callback(undef, undef, \&channel_cb,\&programme_nochange, $file);
	}
}

$writer->end();

printf "Finished parsing, output in $opt->{output_file}\n";
foreach my $k (keys %stats) {
	printf ", %d %s", $stats{$k}, $k;
}
printf "\n";

exit(0);

sub download_ratings_file
{
	my $code = getstore($ratings_tsv_url, $ratings_tsv_file.".gz");
	if ($code != 200) {
		print("Download failed...");
		return 0;
	}
	unless (-r $ratings_tsv_file) { unlink ($ratings_tsv_file); }

	gunzip $ratings_tsv_file.".gz" => $ratings_tsv_file
		or print("gunzip failed: $GunzipError\n") and return 0;
	print ("Removing $ratings_tsv_file.gz file\n");
	unlink($ratings_tsv_file.".gz");
	return 1;		
}

#############################################################################
# check ratings file
# if ratings db not exists or
#    ratings db older than 1 month
#       download new ratings db file
#

sub check_ratings_file
{
	unless (-r $ratings_tsv_file) {
		print("Ratings file doesn't exist, downloading ...\n");
		&download_ratings_file
			or return 0;
	}

	my $last_update_time = (stat($ratings_tsv_file))[9];
	my $now = time();
	my $timediff_days = ($now - $last_update_time)/60/60/24;

	unless ($timediff_days < 30) {
		print("Ratings file older than 1 month, downloading ...\n");
		&download_ratings_file
			or return 0;
	}

	return 1;
}

sub read_ratings_file
{
	print("Reading ratings file ....\n");
	my $csv = Text::CSV->new ({ binary => 1 , sep_char => "\t"});
	if (!defined $csv) {
		print("Didn't create CSV reader\n");
		return 0;
	}
	open my $fh, "<", $ratings_tsv_file 
		or return 0;
	my @cols = @{$csv->getline ($fh)};
	$csv->column_names (@cols);
	while (my $row = $csv->getline_hr ($fh)) {
		$ratings_data{$row->{'tconst'}} = { 'averageRating' => $row->{'averageRating'}, 'numVotes' => $row->{'numVotes'} } ;
	}
	return 1;
}

#############################################################################
# search imdb id
#

sub get_imdb_rating 
{
	my ($imdb_id) = @_;
	my $rating;
	my $rating_count;

	if (!defined $imdb_id) {
		print("get_imdb_rating called with no IMDB ID\n");
		return 0;
	}

	if (!defined $ratings_data{$imdb_id}) {
		print("No rating found\n");
		return 0;
	}

	return $ratings_data{$imdb_id};
}

##############################################################################

sub channel_cb( $ )
{
	my $c = shift;
	# printf "got channel ".Dumper($c);
	$writer->write_channel($c);
}

##############################################################################

sub programme_nochange( $ )
{
	my $prog=shift;
	$writer->write_programme($prog);
} 


sub programme_cb( $ )
{
	my $prog=shift;

	#print Dumper($prog);

	if (defined $prog->{'episode-num'} && (scalar @{$prog->{'episode-num'}}) >= 1) {
		foreach my $episode (@{$prog->{'episode-num'}}) {
			if (defined @{$episode}[1] && @{$episode}[1] eq "imdb.com") {

				my $imdb_id = @{$episode}[0];
				$imdb_id =~ s/title\///;
				Shepherd::Common::log("   found imdb id: $prog->{'title'}->[0]->[0] ($imdb_id)");

				my $rating = &get_imdb_rating($imdb_id);

				if (defined $rating != 0 && $rating != 0) {
					# print(Dumper($rating));
					Shepherd::Common::log("   found rating: $rating->{'averageRating'}/10 ($rating->{'numVotes'})");
					$prog->{'star-rating'} = [ ];
					if ($rating->{'numVotes'} > 10000) {
						push @{$prog->{'star-rating'}}, [ $rating->{'averageRating'}."/10", "imdb.com", undef ];
					}

				}

			}
		}
	}

	print(Dumper($prog));

	$writer->write_programme($prog);
} 


sub run_test
{
	Shepherd::Common::log("running test for: ".$opt->{test});

	my $rating = &get_imdb_rating($opt->{test});

	print($rating->{'averageRating'}."/10 (".$rating->{'numVotes'}.")\n");

        exit(0);
}
