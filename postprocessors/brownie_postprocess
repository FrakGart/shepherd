#!/usr/bin/env perl

# Augment XMLTV start/stop times with the local timezone if MythTV's
# TimeOffset setting is anything other than "None"
#  * to be used as a postprocessor for XMLTV data
#  * can be used in conjunction with 'shepherd' XMLTV reconciler or standalone
#    (pipe-through)
#  * no configuration necessary
#
#  input XMLTV files will either have programme start/stop with or without
#  timezones.  If no timezone is present, Shepherd assumes the input
#  start/stop times are in 'localtime'.
#
#  If MythTV's "TimeOffset" setting is set to anything other than 'None',
#  this can cause programming information to be out:
#   - if set to 'All', all programs will be out by the difference between
#     GMT and locatime ('All' means MythTV is expecting all start/stop times
#     in GMT)
#   - if explicitly set to GMT +/- XX then this will cause programming to
#     be out whenever there is a switchover to/from daylight savings
#
#  this postprocessor addresses this by explicitly putting a timezone
#  on every programme that doesn't already have one, BUT ONLY IF
#  MythTV is configured to anything other than 'None'.
#
#  provided your unix system is configured into the correct timezone,
#  this will work just fine including boundaries crossing daylight savings.
#
#  it means that it doesn't matter if MythTV's "TimeOffset" is set to
#  'All' or 'None', or something inbetween, the data will be right regardless.

# Specific enhancement for Broken Hill:
#  it seems ABC1 broadcasts to Broken Hill with incorrect times. They're using
#  a satellite feed from NSW so Broken Hill is always out by 30 minutes _just_
#  for ABC1 (not ABC2 or any other stations).
#  Since this seems to happen across all ABC1 data from all grabbers (i.e. all
#  data sources get this wrong), fix it up in this postprocessor

# April 2013:
#  MythTV now REQUIRES timezone-stamped data:
#    http://code.mythtv.org/cgit/mythtv/commit/?id=ff5ab27842c522f9e054876a8eb69a51b8c86a2e
#  So we can no longer supply unstamped data as "local time." That will be
#  considered UTC instead. The fix: for MythTV 0.27+, augment_timezone will add timezones
#  to all data, regardless of MythTV's "TimeOffset".
#

use strict;
use warnings;
my $progname = "brownie_postprocess";
my $version = "0.34";

use XMLTV;
use POSIX qw(strftime mktime);
use Getopt::Long;
use IO::File;
use Data::Dumper;

$| = 1;
my %stats;
my $channels, my $opt_channels;

my $opt = { };
$opt->{output_file} =	"output.xmltv";
$opt->{debug} =			0;

# parse command line
GetOptions(
	'output=s'		=> \$opt->{output_file},
	'mysql_file=s'		=> \$opt->{mysql_file},
	'timeoffset=s'		=> \$opt->{timeoffset},
	'chanadjust=s'		=> \$opt->{chanadjust},

	'region=i'		=> \$opt->{region},
	'days=i'		=> \$opt->{days},		# ignored
	'offset=i'		=> \$opt->{offset},		# ignored
	'timezone=s'		=> \$opt->{timezone},		# ignored
	'channels_file=s'	=> \$opt->{channels_file},
	'config-file=s'		=> \$opt->{configfile},		# ignored

	'help'			=> \$opt->{help},
	'verbose'		=> \$opt->{help},
	'version'		=> \$opt->{version},
	'ready'			=> \$opt->{ready},
	'desc'			=> \$opt->{desc},
	'v'			=> \$opt->{version});

printf "%s v%s\n",$progname,$version;

# Check if Shepherd::MythTV is working
my ($mythtv_access, $mythtv_ignores_timeoffset);
if ($opt->{timeoffset})
{
    print "\nTimezone specified via --timeoffset option: \"" . $opt->{timeoffset} . "\".\n" .
	  "Will not attempt to calculate whether this is correct.\n\n";
    if ($opt->{timeoffset} eq "None")
    {
	print "!!! WARNING: Timezone is specified as \"None\". This means we will not\n" .
	      "add timezones to data. MythTV versions 0.27+ REQUIRE timezones, and will\n" .
	      "be out by 8-11 hours without them.\n\n";
    }
}
else
{
    eval { require Shepherd::MythTV; };
    if ($@)
    {
	print "\nWARNING: No support for Shepherd::MythTV!\n".
	      "Continuing without MythTV access. Target timeoffset will be \"None\".\n".
	      "(You may override this with --timeoffset <offset>)\n".
	      "Reason: $@\n";
    } else {
	$mythtv_access = 1;
	eval {
	    if (&Shepherd::MythTV::mythtv_version("0.27") >= 0)
	    {
		$mythtv_ignores_timeoffset = 1;
	    }
	};
	if ($@)
	{
	    print "\n\n!!! WARNING: Could not determine your MythTV version!\n" .
	          "You are probably running an older version of Shepherd::MythTV. Please\n".
		  "run 'tv_grab_au --update' to see if you need to update something.\n".
		  "(Possibly you need to install the perl module 'Sort::Versions'.)\n\n" .
		  "Due to problem above, assuming a version of MythTV EARLIER than 0.27.\n" .
		  "If your MythTV is 0.27 or later and we do not add timestamps, your\n" .
		  "show times may be out by 8-11 hours.\n\n";
	}
    }
}

if ($opt->{version} || $opt->{desc} || $opt->{help} || $opt->{ready} ||
    $opt->{output_file} eq "") {
	printf "Automatically adjust the XMLTV start/stop timezone based on MythTV's\n".
	    "TImeOffset setting.\n" if $opt->{desc};

	printf "$progname is ready for operation.\n" if ($opt->{ready});

	printf "No --output file specified.\n" if ($opt->{output_file} eq "");

	if ($opt->{help} || $opt->{output_file} eq "") {
	        my $default_loc = ($mythtv_access ? &Shepherd::MythTV::standard_mysql_locations : 'none');
		print<<EOF

usage: $0 [options] {FILE(s)}

Supported options include:
  --output={file}      Send final XMLTV output to {file} (default: $opt->{output_file})
  --mysql_file={file}  File where we look for mythtv database user/pass/dbi (default: $default_loc)
  --timeoffset={s}     Specify MythTV's setting, rather than try to look it up
                       in MythTV's database. (E.g. "Auto", "None", "+1000")
  --chanadjust={s}     Specify a specific channel to be time-adjusted 
                       (e.g. "SBS,30" will add 30 minutes to all SBS programs)
EOF
;
	}
	exit(0);
}

my %writer_args = ( encoding => 'ISO-8859-1' );
my $fh = new IO::File(">".$opt->{output_file}) || die "can't open $opt->{output_file} for writing: $!";
$writer_args{OUTPUT} = $fh;

my $writer = new XMLTV::Writer(%writer_args);
$writer->start( {
	'source-info-name' => "$progname $version",
	'generator-info-name' => "$progname $version"} );

foreach my $file (@ARGV) {
	printf " - parsing: %s\n", ($file eq "-" ? "(from-stdin, hit control-D to finish)" : $file);
	XMLTV::parsefiles_callback(undef, undef, \&channel_cb,\&programme_cb, $file);
}

$writer->end();

printf "Finished parsing, output in $opt->{output_file}\n";
foreach my $k (keys %stats) {
	printf ", %d %s", $stats{$k}, $k;
}
printf "\n";

exit(0);

##############################################################################

sub channel_cb( $ )
{
	my $c = shift;
	# printf "got channel ".Dumper($c);
	$writer->write_channel($c);
}

##############################################################################

sub programme_cb( $ )
{
	my $prog=shift;

	#print Dumper($prog);

	if ($prog->{'title'}->[0]->[0] =~ / \- Premiere$/) {
		print "$prog->{'title'}->[0]->[0], removing - Premiere\n";
		$prog->{'title'}->[0]->[0] =~ s/ - Premiere$//;
		$prog->{'premiere'}->[0] = "premiere";
	}

	if ($prog->{'title'}->[0]->[0] =~ / \- New$/) {
		print "$prog->{'title'}->[0]->[0], removing - New\n";
		$prog->{'title'}->[0]->[0] =~ s/ - New$//;
	}

	if ($prog->{'title'}->[0]->[0] =~ /^Live: /) {
		print "$prog->{'title'}->[0]->[0], removing Live:\n";
		$prog->{'title'}->[0]->[0] =~ s/^Live: //;
	}

	if ($prog->{'title'}->[0]->[0] =~ /^LIVE: /) {
		print "$prog->{'title'}->[0]->[0], removing Live:\n";
		$prog->{'title'}->[0]->[0] =~ s/^LIVE: //;
	}

	if ($prog->{'title'}->[0]->[0] =~ / \(New Series Premiere\)$/) {
		print "$prog->{'title'}->[0]->[0], removing (New Series Premiere)\n";
		$prog->{'title'}->[0]->[0] =~ s/ \(New Series Premiere\)//;
		$prog->{'premiere'}->[0] = "premiere";
	}

	if ($prog->{'title'}->[0]->[0] =~ / \((\d\d\d\d)\)$/) {
		print "$prog->{'title'}->[0]->[0], removing year, setting date to $1\n";
		$prog->{'date'} = int($1);

		$prog->{'title'}->[0]->[0] =~ s/ \(\d\d\d\d\)$//;
	}

        if (defined $prog->{'category'}) {
                foreach my $prog_category (@{($prog->{'category'})}) {
			#print "$prog_category->[0]\n";
			if ($prog_category->[0] =~ /movie/i && !($prog_category->[0] =~ /movie/)  ) {
				print "$prog->{'title'}->[0]->[0], ";
				print "Changing $prog_category->[0] to movie\n";
				$prog_category->[0] = 'movie';
				delete $prog->{'episode-num'};

			}
                }
        }
	#print Dumper($prog);

	$writer->write_programme($prog);
} 
