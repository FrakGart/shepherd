#!/usr/bin/env perl
# 
#

use warnings;

use XMLTV;
use Shepherd::Common;
use POSIX qw(strftime mktime);
use Data::Dump qw(dump);
use Data::Dumper;
#
# global variables and settings
#
# supported Shepherd channels and the corresponding number @ zaxmltv

my @supported = ("10 Bold","10 HD","10 Peach","10 Shake","7flix","7HD","7mate","7TWO","9Gem","9Go!",
		"9HD","9Life","9Rush","ABC COMEDY/ABC KIDS","ABC HD","ABCME","ABCNEWS",
		"NITV","SBS Food", "SBS HD", "SBS World Movies", "SBSVICELANDHD",
		"Triple J", "Triple J Unearthed", "Double J", "ABC Brisbane");
my %channel_map = (
   '5.yourtv.com.au'   =>	    'nine.shepherd.au',
#  '50.yourtv.com.au'  =>	    'SC 9HD NSW'
   '52.yourtv.com.au'  =>	    'gem.shepherd.au',
   '53.yourtv.com.au'  =>	    'go!.shepherd.au',
   '54.yourtv.com.au'  =>	    '9life.shepherd.au',
   '2.yourtv.com.au'   =>	    'abc.shepherd.au',
   '20.yourtv.com.au'  =>	    'abchd.shepherd.au',
   '22.yourtv.com.au'  =>	    'abccomedy/abckids.shepherd.au',
   '23.yourtv.com.au'  =>	    'abcme.shepherd.au',
   '24.yourtv.com.au'  =>	    'abcnews.shepherd.au',
   '3.yourtv.com.au'   =>	    'sbs.shepherd.au',
   '30.yourtv.com.au'  =>	    'sbshd.shepherd.au',
   '31.yourtv.com.au'  =>	    'sbsvicelandhd.shepherd.au',
   '32.yourtv.com.au'  =>	    'sbsworldmovies.shepherd.au',
   '33.yourtv.com.au'  =>	    'sbsfood.shepherd.au',
   '8.yourtv.com.au'   =>	    'win.shepherd.au',
   '80.yourtv.com.au'  =>	    'winhd.shepherd.au',
   '81.yourtv.com.au'  =>	    'winbold.shepherd.au',
   '82.yourtv.com.au'  =>	    'winpeach.shepherd.au',
   '85.yourtv.com.au'  =>	    'wingold.shepherd.au',
   '6.yourtv.com.au'   =>           'prime7.shepherd.au',
#  '60.yourtv.com.au'  =>	    'PRIME7 HD Southern, Canberra'
   '62.yourtv.com.au'  =>	    '7two.shepherd.au',
   '63.yourtv.com.au'  =>	    '7mate.shepherd.au',
   '66.yourtv.com.au'  =>	    '7flixprime.shepherd.au',
   '34.yourtv.com.au'  =>	    'nitv.shepherd.au'
#  '55.yourtv.com.au'  =>	    'SBN NSW'
#  '56.yourtv.com.au'  =>	    'Aspire NSW'
#  '65.yourtv.com.au'  =>	    'ishoptv NSW'
#  '68.yourtv.com.au'  =>	    'RACING.COM NSW'
#  '75.yourtv.com.au'  =>	    'Openshop'
#  '83.yourtv.com.au'  =>	    'WIN Sky Southern NSW'
#  '84.yourtv.com.au'  =>	    'TVSN NSW'
#  '305.yourtv.com.au' =>	    'SBS PopDesi'
#  '36.yourtv.com.au'  =>	    'SBS Arabic24'
#  '302.yourtv.com.au' =>	    'SBS Radio 2'
#  '37.yourtv.com.au'  =>	    'SBS Radio 1'
#  '38.yourtv.com.au'  =>	    'SBS Radio 2'
#  '303.yourtv.com.au' =>	    'SBS Radio 3'
#  '39.yourtv.com.au'  =>	    'SBS Chill'
#  '304.yourtv.com.au' =>	    'SBS Arabic24'
#  '307.yourtv.com.au' =>	    'SBS PopAsia'
#  '301.yourtv.com.au' =>	    'SBS Radio 1'
#  '306.yourtv.com.au' =>	    'SBS Chill'
#  '28.yourtv.com.au'  =>	    'Triple J'
#  '203.yourtv.com.au' =>	    'ABC Country'
#  '27.yourtv.com.au'  =>	    'ABC Classic'
#  '202.yourtv.com.au' =>	    'ABC Kids Listen'
#  '26.yourtv.com.au'  =>	    'ABC Radio National'
#  '200.yourtv.com.au' =>	    'Double J'
#  '201.yourtv.com.au' =>	    'ABC Jazz'
#  '25.yourtv.com.au'  =>	    'ABC Local Radio'
#  '204.yourtv.com.au' =>	    'ABC News Radio'
#  '29.yourtv.com.au'  =>	    'Triple J Unearthed'
);

$| = 1;
my $writer;

#
# go go go!
#

my %stats;
my $o;

Shepherd::Common::program_begin(\$o, "xmltv_net", "0.04", \%stats);
&start_writing_xmltv();
#my ($channels, $opt_channels, $gaps) =();

($channels, $opt_channels, $gaps) = Shepherd::Common::read_channels($o);

&get_data();


$writer->end();

Shepherd::Common::program_end($o, %stats);
exit(0);

##############################################################################

sub start_writing_xmltv
{	
	my %writer_args = ( encoding => 'UTF-8' );
	if ($o->{outputfile}) {
		my $fh = new IO::File(">$o->{outputfile}") || die "can't open $o->{outputfile}: $!";
		$writer_args{OUTPUT} = $fh;
	}

	$writer = new XMLTV::Writer(%writer_args);
	$writer->start ( { 'source-info-name' => "xmltv.net",'generator-info-name' => "$o->{program_name} v$o->{version_number}"} );
}

##############################################################################

sub get_data
{
#        my $file = $_[0];
	$baseurl = "http://xmltv.net/xml_files/Canberra.xml";
	my $data = &Shepherd::Common::get_url(url => $baseurl);
        if (!$data) {
                 Shepherd::Common::log("Failed to get XML from '$baseurl'");
                 $stats{failed_html_get}++;
                 return 0;
        }
        my $listing = XMLTV::parse($data);
#	my $file = '/tmp/Brisbane.xml';
#	my $listing = XMLTV::parsefile($file);
#	print(Dumper($listing)."\n");
        # strip the cruft from the source xml, we only want the programs.
        my ($encoding, $credits, $ch, $progs) = @$listing;

	foreach $chan (keys %$ch) {
		next unless defined $channel_map{$chan};
		if (defined ($ch->{$chan}->{'icon'})) {
			$writer->write_channel( {'display-name' => [[ $ch->{$chan}->{'display-name'}[0][0], $o->{lang} ]],
					'id' => $channel_map{$chan} ,
					'icon' => $ch->{$chan}->{'icon'} } );

		} else {
			$writer->write_channel( {'display-name' => [[ $ch->{$chan}->{'display-name'}[0][0], $o->{lang} ]],
					'id' => $channel_map{$chan} } );
		}
	}
        foreach (@$progs) {
		next unless defined $channel_map{$_->{channel}};
                $_->{channel} = $channel_map{$_->{channel}};
                $writer->write_programme($_);
        }
                                                                                                                                 
}

##############################################################################

